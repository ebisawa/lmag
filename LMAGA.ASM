　　
	.486
	.model	use16 small, c
	.code

	locals

	public	mag_decode_flag
	public	mag_decode_pixel
	public	mag_convert_vram
	public	mag_copy_vram

; ======================================================================
; フラグ展開 (640x400 16色専用)
; ======================================================================
mag_decode_flag proc
	push	bp
	mov	bp, sp
	push	si
	push	di
	mov	di, [bp+4]
	mov	bx, [bp+6]
	mov	si, [bp+8]
; ----------------------------------------------------------------------
; DS:DI -> flag_x (near) (32000bytes)
; DS:BX -> flag_a (near) ( 4000bytes)
; DS:SI -> flag_b (near)
; ----------------------------------------------------------------------
; まずダミーの先頭 80 バイトをクリア
; ----------------------------------------------------------------------
	mov	cx, 20			; 80 / 4
	xor	eax, eax
	rep	stosd
; ----------------------------------------------------------------------
	mov	cx, 1000 		; 4000 / 4
@@loop_a:
	mov	eax, [bx]
	mov	bp, 32			; ループカウンタ
	add	bx, 4
	bswap	eax			; DCBA -> ABCD (486+)
@@loop_b:
	add	eax, eax		; CF に最上位ビットの値が入る
; ----------------------------------------------------------------------
; CF == 1 なら flag_b より１バイト転送
;       0 なら クリア
; ----------------------------------------------------------------------
	jc	@@byte_copy
; ----------------------------------------------------------------------
; CF == 0 -> １バイト０クリア
; ----------------------------------------------------------------------
	mov	dl, byte ptr [di-80]
	mov	byte ptr [di], dl
	inc	di
	dec	bp
	jnz	@@loop_b
	jmp	@@loop_b_end
; ----------------------------------------------------------------------
; CF == 1 -> flag_b より１バイト転送
; ----------------------------------------------------------------------
@@byte_copy:
	mov	dl, [si]
	inc	si
	xor	dl, [di-80]
	mov	[di], dl
	inc	di
	dec	bp
	jnz	@@loop_b
@@loop_b_end:
	dec	cx
	jnz	@@loop_a

	pop	di
	pop	si
	pop	bp
	ret
	endp

; ======================================================================
; ピクセル展開 (640x400 16色専用)
; ======================================================================
mag_decode_pixel proc
	push	bp
	mov	bp, sp
	push	si
	push	di
	les	di, [bp+4]
	mov	bx, [bp+8]
	mov	si, [bp+10]
; ----------------------------------------------------------------------
; DS:SI -> pixel  (near)
; ES:DI -> vvram  (far)  (128000bytes)  *64KB over!!
; DS:BX -> flag_x (near) ( 32000bytes)
; ----------------------------------------------------------------------
	mov	cx, 8000		; 3200 / 4
@@loop_a:
; ----------------------------------------------------------------------
; vvram のサイズが 64KB を越えているため、適当にアドレスの正規化を行なわ
; なくてはならないが、最大で 5120 バイト前を参照することがあるのに注意
; ----------------------------------------------------------------------
	cmp	di, 0f000h
	jae	@@adreg
@@label_r:
	mov	eax, [bx]
	push	cx
	add	bx, 4
	bswap	eax			; DCBA -> ABCD (486+)
	mov	cx, 8
@@loop_b:
	xor	edx, edx
	shld	edx, eax, 4
	shl	eax, 4
	cmp	dx, 0
	je	@@pixel_fill
; ----------------------------------------------------------------------
; ピクセルコピー
;
;   この時点での状態: DX = フラグ
; 変更可能なレジスタ: DX, BP (レジスタ足りないぞ!!)
;
;           処理内容: ES:[DI] = ES:[DI - [pxlidx + DX * 2]]
; ----------------------------------------------------------------------
	mov	bp, di
	sub	bp, [pxlidx + edx * 2]
	mov	dx, es:[bp]
	mov	es:[di], dx
	add	di, 2
	dec	cx
	jnz	@@loop_b
	jmp	@@loop_b_end
@@pixel_fill:
	mov	dx, [si]
	mov	es:[di], dx
	add	si, 2
	add	di, 2
	dec	cx
	jnz	@@loop_b
@@loop_b_end:
	pop	cx
	dec	cx
	jnz	@@loop_a

	pop	di
	pop	si
	pop	bp
	ret
@@adreg:				; AX, DX が使用可能
	mov	ax, es
	add	ax, 800h
	mov	es, ax
	sub	di, 8000h
	jmp	@@label_r
	endp

; ======================================================================
; VRAM 垂直→水平変換 (640x400 16色専用)
; ======================================================================
mag_convert_vram proc
	push	bp
	mov	bp, sp
	push	ds
	push	si
	push	di
	mov	ax, ds
	mov	gs, ax
	les	di, [bp+4]
	lgs	si, [bp+8]
	mov	ax, es
	add	ax, 0fa0h
	mov	fs, ax
; ----------------------------------------------------------------------
; GS:SI -> vvram  (128000bytes)  *64KB over!!
; ES:DI -> hvram1 ( 64000bytes)  B 32K, R 32K
; FS:DI -> hvram2 ( 64000bytes)  G 32K, I 32K
; DS    -> DGROUP
; ※ DI == 0 が前提
; ----------------------------------------------------------------------
	mov	bp, 32000		; 128000 / 4
	xor	ebx, ebx
@@loop_a:
; ----------------------------------------------------------------------
; 空いているレジスタ: EBX(= 0), CX, DX
; ----------------------------------------------------------------------
	mov	eax, gs:[si]
	add	si, 4
	cmp	si, 0f000h
	jae	@@adreg
@@label_r:
	mov	bl, al
	mov	cx, [cvtbl1+ebx*2]	; CX = 000000I1I2 000000G1G2
	shr	eax, 8
	mov	dx, [cvtbl2+ebx*2]	; DX = 000000R1R2 000000R1R2
	shl	cx, 2
	shl	dx, 2

	mov	bl, al
	or	cx, [cvtbl1+ebx*2]
	shr	eax, 8
	or	dx, [cvtbl2+ebx*2]
	shl	cx, 2
	shl	dx, 2

	mov	bl, al
	or	cx, [cvtbl1+ebx*2]
	shr	eax, 8
	or	dx, [cvtbl2+ebx*2]
	shl	cx, 2
	shl	dx, 2

	mov	bl, al
	or	cx, [cvtbl1+ebx*2]	; CX = (I)(G)
	or	dx, [cvtbl2+ebx*2]	; DX = (R)(B)
; ----------------------------------------------------------------------
; ES:DI -> hvram1 ( 64000bytes)  B 32K, R 32K
; FS:DI -> hvram2 ( 64000bytes)  G 32K, I 32K
; ----------------------------------------------------------------------
	mov	es:[di], dl		; B
	mov	es:[di+32000], dh	; R
	mov	fs:[di], cl		; G
	mov	fs:[di+32000], ch	; I
	inc	di
	dec	bp
	jnz	@@loop_a
	pop	di
	pop	si
	pop	ds
	pop	bp
	ret
@@adreg:
	mov	dx, gs
	add	dx, 800h
	mov	gs, dx
	sub	si, 8000h
	jmp	@@label_r
	endp

; ======================================================================
; VRAM 転送
; ======================================================================
mag_copy_vram	proc
	push	bp
	mov	bp, sp
	push	ds
	push	si
	push	di

	lds	si, [bp+4]
; ----------------------------------------------------------------------
; DS:SI -> hvram  ( 64000bytes)  B 32K, R 32K, G 32K, I 32K
; ----------------------------------------------------------------------
; B PLANE (A800)
; ----------------------------------------------------------------------
	mov	ax, 0a800h
	mov	es, ax
	xor	di, di
	mov	cx, 8000
	rep	movsd
; ----------------------------------------------------------------------
; R PLANE (B000)
; ----------------------------------------------------------------------
	mov	ax, 0b000h
	mov	es, ax
	xor	di, di
	mov	cx, 8000
	rep	movsd
; ----------------------------------------------------------------------
	mov	ax, ds
	add	ax, 0fa0h
	mov	ds, ax
	xor	si, si
; ----------------------------------------------------------------------
; G PLANE (B800)
; ----------------------------------------------------------------------
	mov	ax, 0b800h
	mov	es, ax
	xor	di, di
	mov	cx, 8000
	rep	movsd
; ----------------------------------------------------------------------
; I PLANE (E000)
; ----------------------------------------------------------------------
	mov	ax, 0e000h
	mov	es, ax
	xor	di, di
	mov	cx, 8000
	rep	movsd
	pop	di
	pop	si
	pop	ds
	pop	bp
	ret
	endp

	.data
; ----------------------------------------------------------------------
; ピクセルデータを何バイト前からコピーしてくるかのテーブル
; ----------------------------------------------------------------------
pxlidx	dw	0,2,4,8,320,322,640,642,644,1280,1282,1284,2560,2562,2564,5120
; ----------------------------------------------------------------------
; I1 G1 R1 B1 I2 G2 R2 B2 → 000000I1I2 000000G1G2 変換テーブル
; ----------------------------------------------------------------------
cvtbl1  dw          0,     0,     0,     0,     1,     1,     1,     1
        dw        256,   256,   256,   256,   257,   257,   257,   257
        dw          0,     0,     0,     0,     1,     1,     1,     1
        dw        256,   256,   256,   256,   257,   257,   257,   257
        dw          0,     0,     0,     0,     1,     1,     1,     1
        dw        256,   256,   256,   256,   257,   257,   257,   257
        dw          0,     0,     0,     0,     1,     1,     1,     1
        dw        256,   256,   256,   256,   257,   257,   257,   257
        dw          2,     2,     2,     2,     3,     3,     3,     3
        dw        258,   258,   258,   258,   259,   259,   259,   259
        dw          2,     2,     2,     2,     3,     3,     3,     3
        dw        258,   258,   258,   258,   259,   259,   259,   259
        dw          2,     2,     2,     2,     3,     3,     3,     3
        dw        258,   258,   258,   258,   259,   259,   259,   259
        dw          2,     2,     2,     2,     3,     3,     3,     3
        dw        258,   258,   258,   258,   259,   259,   259,   259
        dw        512,   512,   512,   512,   513,   513,   513,   513
        dw        768,   768,   768,   768,   769,   769,   769,   769
        dw        512,   512,   512,   512,   513,   513,   513,   513
        dw        768,   768,   768,   768,   769,   769,   769,   769
        dw        512,   512,   512,   512,   513,   513,   513,   513
        dw        768,   768,   768,   768,   769,   769,   769,   769
        dw        512,   512,   512,   512,   513,   513,   513,   513
        dw        768,   768,   768,   768,   769,   769,   769,   769
        dw        514,   514,   514,   514,   515,   515,   515,   515
        dw        770,   770,   770,   770,   771,   771,   771,   771
        dw        514,   514,   514,   514,   515,   515,   515,   515
        dw        770,   770,   770,   770,   771,   771,   771,   771
        dw        514,   514,   514,   514,   515,   515,   515,   515
        dw        770,   770,   770,   770,   771,   771,   771,   771
        dw        514,   514,   514,   514,   515,   515,   515,   515
        dw        770,   770,   770,   770,   771,   771,   771,   771
; ----------------------------------------------------------------------
; I1 G1 R1 B1 I2 G2 R2 B2 → 000000R1R2 000000B1B2 変換テーブル
; ----------------------------------------------------------------------
cvtbl2  dw          0,     1,   256,   257,     0,     1,   256,   257
        dw          0,     1,   256,   257,     0,     1,   256,   257
        dw          2,     3,   258,   259,     2,     3,   258,   259
        dw          2,     3,   258,   259,     2,     3,   258,   259
        dw        512,   513,   768,   769,   512,   513,   768,   769
        dw        512,   513,   768,   769,   512,   513,   768,   769
        dw        514,   515,   770,   771,   514,   515,   770,   771
        dw        514,   515,   770,   771,   514,   515,   770,   771
        dw          0,     1,   256,   257,     0,     1,   256,   257
        dw          0,     1,   256,   257,     0,     1,   256,   257
        dw          2,     3,   258,   259,     2,     3,   258,   259
        dw          2,     3,   258,   259,     2,     3,   258,   259
        dw        512,   513,   768,   769,   512,   513,   768,   769
        dw        512,   513,   768,   769,   512,   513,   768,   769
        dw        514,   515,   770,   771,   514,   515,   770,   771
        dw        514,   515,   770,   771,   514,   515,   770,   771
        dw          0,     1,   256,   257,     0,     1,   256,   257
        dw          0,     1,   256,   257,     0,     1,   256,   257
        dw          2,     3,   258,   259,     2,     3,   258,   259
        dw          2,     3,   258,   259,     2,     3,   258,   259
        dw        512,   513,   768,   769,   512,   513,   768,   769
        dw        512,   513,   768,   769,   512,   513,   768,   769
        dw        514,   515,   770,   771,   514,   515,   770,   771
        dw        514,   515,   770,   771,   514,   515,   770,   771
        dw          0,     1,   256,   257,     0,     1,   256,   257
        dw          0,     1,   256,   257,     0,     1,   256,   257
        dw          2,     3,   258,   259,     2,     3,   258,   259
        dw          2,     3,   258,   259,     2,     3,   258,   259
        dw        512,   513,   768,   769,   512,   513,   768,   769
        dw        512,   513,   768,   769,   512,   513,   768,   769
        dw        514,   515,   770,   771,   514,   515,   770,   771
        dw        514,   515,   770,   771,   514,   515,   770,   771

	end

